
service: elasticsearch-config

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  elasticSearchDomainEndpoint: ${cf:elasticsearch-${self:custom.stage}.ElasticSearchDomainEndpoint}
  elasticSearchDomainArn: ${cf:elasticsearch-${self:custom.stage}.ElasticSearchDomainArn}

provider:
  name: aws
  runtime: nodejs12.x

package:
  individually: true

functions:
  createIndex:
    handler: createIndex.handler
    role: LambdaEsConfigRole
    environment:
      ES_ENDPOINT: ${self:custom.elasticSearchDomainEndpoint}
      INDEX: newstuff
      TYPE: json
    maximumRetryAttempts: 2
  createMapping:
    handler: createMapping.handler
    role: LambdaEsConfigRole
    environment:
      ES_ENDPOINT: ${self:custom.elasticSearchDomainEndpoint}
      INDEX: amendments
      TYPE: json
    maximumRetryAttempts: 2

resources:
  Resources:
    LambdaEsConfigRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
        Path: '/'
        Policies:
          - PolicyName: 'LambdaRolePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: 'Allow'
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                - es:ESHttp*
                Resource: ${self:custom.elasticSearchDomainArn}/*
