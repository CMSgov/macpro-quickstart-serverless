#iamPath: optional: This is optional and it is used to assign extra permissions for the service user or role to create certain  resources.
#iamPermissionsBoundaryPolicy: optional: This is used to limit the scope of Iam users and roles to prevent privilege escalation
#infrastructureType: This is used to select which infrastructure type that this deployment will be deployed on. Eg is development
#sesSourceEmailAddress: not mandatory
#route53HostedZoneId:  optional :This is the Id of the Amazon route53 hosted zone
#route53DomainName: optional: Route 53 domain name for the site if any
#cloudfrontCertificateArn: optional:  The arn for the clodfront distribution certificate
#cloudfrontDomainName: The domain name for the cloudfront distribution
#**okta_metadata_url: optional: url for okta
#**reviewerEmailAddress: Email address of the submissions reviewer
#lambda warmup schedule: This is a set schedule for warming up the lambda function
#lambda warmup concurrency: Concurrency of the warmup function is the number of requests it can handle at any given time.
#Self:custom.stage: stages are used for creating independent environments for development. Whenever a new branch is created, the branch name is assigned as the custom stage name, which helps to avoid conflicts by creating a whole new environment separate from existing ones.

## set the values for the following ssm parameters in AWS SSM Parameter store for app-api service. You will need to set the values and also a default value to fall to if the required value is not present.
# 1. iamPath:  /configuration/${self:custom.stage}/iam/path    &  /configuration/default/iam/path
# 2. iamPermissionsBoundaryPolicy:  configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy    &  /configuration/default/iam/permissionsBoundaryPolicy
# 3. infrastructureType:  /configuration/${self:custom.stage}/infrastucture/type       &  /configuration/default/iam/permissionsBoundaryPolicy
# 4. lambda warmup schedule: /configuration/${self:custom.stage}/warmup/schedule       &  /configuration/default/warmup/schedule
# 5. lambda warmup concurrency: configuration/${self:custom.stage}/warmup/concurrency     &  /configuration/default/warmup/concurrency
frameworkVersion: "2"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-plugin-scripts
  - serverless-associate-waf
  - serverless-offline
  - serverless-stack-termination-protection

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}
  serverlessTerminationProtection:
    stages: # This is a list of common names for important envs that should not be destroyed.  You can remove the stage names your project doesn't use; this list is meant to be inclusive.
      - master
      - val
      - production
      - develop
      - main
      - impl
      - val
      - prod
  infrastructureType: ${ssm:/configuration/${self:custom.stage}/infrastucture/type~true, ssm:/configuration/default/infrastucture/type~true, "development"}
  tableName: ${env:AMENDMENTS_TABLE_NAME, cf:database-${self:custom.stage}.AmendmentsTableName}
  tableArn: ${env:AMENDMENTS_TABLE_ARN, cf:database-${self:custom.stage}.AmendmentsTableArn}
  atomicCounterTableName: ${env:AMENDMENTS_COUNTER_TABLE_NAME, cf:database-${self:custom.stage}.AmendmentsAtomicCounterTableName}
  atomicCounterTableArn: ${env:AMENDMENTS_COUNTER_TABLE_ARN, cf:database-${self:custom.stage}.AmendmentsAtomicCounterTableArn}

  warmup:
    enabled: true
    role: LambdaWarmupRole
    vpc: false
    events:
      - schedule: rate(${ssm:/configuration/${self:custom.stage}/warmup/schedule~true, ssm:/configuration/default/warmup/schedule~true, "4 minutes"})
    timeout: 20
    prewarm: true
    concurrency: ${ssm:/configuration/${self:custom.stage}/warmup/concurrency~true, ssm:/configuration/default/warmup/concurrency~true, 5}
    folderName: node_modules/serverless-bundle/src/_warmup
    cleanFolder: false
  scripts:
    hooks:
      package:setupProviderConfiguration: |
        # Remove the timestamp line from the warmup handler so a new function is uploaded
        #   only if a configuration has truly changed.
        set -e
        if [ -d "node_modules/serverless-bundle/src/_warmup" ]; then
          cd node_modules/serverless-bundle/src/_warmup
          sed '/Generated/d' index.js > index.js.sub && mv -f index.js.sub index.js
        fi

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    atomicCounterTableName: ${self:custom.atomicCounterTableName}

associateWaf:
  name: ${self:service.name}-${self:custom.stage}-WebACLAssociation
  version: V2

functions:
  create:
    handler: handlers/create.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: handlers/get.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: handlers/list.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: handlers/update.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: handlers/delete.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy}
  Resources:
    LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: "LambdaApiRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - ${self:custom.tableArn}
                    - ${self:custom.atomicCounterTableArn}
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource: !Sub /arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}
    LambdaWarmupRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "Warmup"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    ApiGwWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:custom.stage}-ApiGwWebAcl
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
