#iamPath: optional: This is optional and it is used to assign extra permissions for the service user or role to create certain  resources.
#iamPermissionsBoundaryPolicy: optional: This is used to limit the scope of Iam users and roles to prevent privilege escalation
#infrastructureType: This is used to select which infrastructure type that this deployment will be deployed on. Eg is development
#sesSourceEmailAddress: not mandatory
#route53HostedZoneId:  optional :This is the Id of the Amazon route53 hosted zone
#route53DomainName: optional: Route 53 domain name for the site if any
#cloudfrontCertificateArn: optional:  The arn for the clodfront distribution certificate
#cloudfrontDomainName: The domain name for the cloudfront distribution
#**okta_metadata_url: optional: url for okta
#**reviewerEmailAddress: Email address of the submissions reviewer
#lambda warmup schedule: This is a set schedule for warming up the lambda function
#lambda warmup concurrency: Concurrency of the warmup function is the number of requests it can handle at any given time.
#Self:custom.stage: stages are used for creating independent environments for development. Whenever a new branch is created, the branch name is assigned as the custom stage name, which helps to avoid conflicts by creating a whole new environment separate from existing ones.

## set the values for the following ssm parameters in AWS SSM Parameter store for stream-functions service. You will need to set the values and also a default value to fall to if the required value is not present.
# 1. iamPath:  /configuration/${self:custom.stage}/iam/path    &  /configuration/default/iam/path
# 2. iamPermissionsBoundaryPolicy:  configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy    &  /configuration/default/iam/permissionsBoundaryPolicy
# 3. sesSourceEmailAddress: /configuration/${self:custom.stage}/sesSourceEmailAddress     &  /configuration/default/sesSourceEmailAddress
# 4. reviewerEmailAddress: /configuration/${self:custom.stage}/reviewerEmailAddress     &   /configuration/default/reviewerEmailAddress
service: stream-functions

frameworkVersion: "2"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-stack-termination-protection

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}
  serverlessTerminationProtection:
    stages: # This is a list of common names for important envs that should not be destroyed.  You can remove the stage names your project doesn't use; this list is meant to be inclusive.
      - master
      - val
      - production
      - develop
      - main
      - impl
      - val
      - prod
  tableStreamArn: ${cf:database-${self:custom.stage}.AmendmentsTableStreamArn}
  sesSourceEmailAddress: ${ssm:/configuration/${self:custom.stage}/sesSourceEmailAddress~true, ssm:/configuration/default/sesSourceEmailAddress~true, "admin@example.com"}
  reviewerEmailAddress: ${ssm:/configuration/${self:custom.stage}/reviewerEmailAddress~true, ssm:/configuration/default/reviewerEmailAddress~true, "reviewteam@example.com"}

functions:
  emailSubmitter:
    handler: handlers/emailSubmitter.handler
    events:
      - stream:
          arn: ${self:custom.tableStreamArn}
          startingPosition: LATEST
          maximumRetryAttempts: 2
    role: LambdaEmailerRole
    environment:
      emailSource: ${self:custom.sesSourceEmailAddress}
    maximumRetryAttempts: 2
  emailReviewer:
    handler: handlers/emailReviewer.handler
    events:
      - stream:
          arn: ${self:custom.tableStreamArn}
          startingPosition: LATEST
          maximumRetryAttempts: 2
    role: LambdaEmailerRole
    environment:
      emailSource: ${self:custom.sesSourceEmailAddress}
      reviewerEmail: ${self:custom.reviewerEmailAddress}
    maximumRetryAttempts: 2

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy}
  Resources:
    LambdaEmailerRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "LambdaRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                  Resource: ${self:custom.tableStreamArn}
                - Effect: "Allow"
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource: "*"
