#iamPath: optional: This is optional and it is used to assign extra permissions for the service user or role to create certain  resources.
#iamPermissionsBoundaryPolicy: optional: This is used to limit the scope of Iam users and roles to prevent privilege escalation
#infrastructureType: This is used to select which infrastructure type that this deployment will be deployed on. Eg is development
#sesSourceEmailAddress: not mandatory
#route53HostedZoneId:  optional :This is the Id of the Amazon route53 hosted zone
#route53DomainName: optional: Route 53 domain name for the site if any
#cloudfrontCertificateArn: optional:  The arn for the clodfront distribution certificate
#cloudfrontDomainName: The domain name for the cloudfront distribution
#**okta_metadata_url: optional: url for okta
#**reviewerEmailAddress: Email address of the submissions reviewer
#lambda warmup schedule: This is a set schedule for warming up the lambda function
#lambda warmup concurrency: Concurrency of the warmup function is the number of requests it can handle at any given time.
#Self:custom.stage: stages are used for creating independent environments for development. Whenever a new branch is created, the branch name is assigned as the custom stage name, which helps to avoid conflicts by creating a whole new environment separate from existing ones.

## set the values for the following ssm parameters in AWS SSM Parameter store for ui service. You will need to set the values and also a default value to fall to if the required value is not present.
# 1. iamPath:  /configuration/${self:custom.stage}/iam/path    &  /configuration/default/iam/path
# 2. iamPermissionsBoundaryPolicy:  configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy    &  /configuration/default/iam/permissionsBoundaryPolicy
# 3. route53HostedZoneId: /configuration/${self:custom.stage}/route53/hostedZoneId     &  /configuration/default/route53/hostedZoneId
# 4. route53DomainName: /configuration/${self:custom.stage}/route53/domainName
# 5. cloudfrontCertificateArn: /configuration/${self:custom.stage}/cloudfront/certificateArn     &  /configuration/default/cloudfront/certificateArn
# 6. cloudfrontDomainName: /configuration/${self:custom.stage}/cloudfront/domainName

service: ui

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1

plugins:
  - serverless-stack-termination-protection

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages: # This is a list of common names for important envs that should not be destroyed.  You can remove the stage names your project doesn't use; this list is meant to be inclusive.
      - master
      - val
      - production
      - develop
      - main
      - impl
      - val
      - prod
  route53HostedZoneId: ${ssm:/configuration/${self:custom.stage}/route53/hostedZoneId~true, ssm:/configuration/default/route53/hostedZoneId~true, ""}
  route53DomainName: ${ssm:/configuration/${self:custom.stage}/route53/domainName~true, ""}
  cloudfrontCertificateArn: ${ssm:/configuration/${self:custom.stage}/cloudfront/certificateArn~true, ssm:/configuration/default/cloudfront/certificateArn~true, ""}
  cloudfrontDomainName: ${ssm:/configuration/${self:custom.stage}/cloudfront/domainName~true, ""}
  wafLoggingBucket: ${cf:ui-waflog-s3-bucket-${self:custom.stage}.WaflogsUploadBucketArn}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy}
    CreateDnsRecord:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.route53HostedZoneId}
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.route53DomainName}
    CreateCustomCloudFrontDomain:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.cloudfrontCertificateArn}
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${self:custom.cloudfrontDomainName}
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
      DeletionPolicy: Delete
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "s3:GetObject"
              Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
        Bucket: !Ref S3Bucket
    CloudFrontWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: CLOUDFRONT
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI to prevent direct public access to the bucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distro for the static website hosted in S3
          Aliases:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - - ${self:custom.cloudfrontDomainName}
              - !Ref AWS::NoValue
          Origins:
            - DomainName: !GetAtt S3Bucket.DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          Enabled: true
          HttpVersion: "http2"
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - AcmCertificateArn: ${self:custom.cloudfrontCertificateArn}
                MinimumProtocolVersion: TLSv1
                SslSupportMethod: sni-only
              - CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 403
              ResponsePagePath: /index.html
          WebACLId: !GetAtt CloudFrontWebAcl.Arn
    Route53DnsRecord:
      Type: AWS::Route53::RecordSet
      Condition: CreateDnsRecord
      Properties:
        HostedZoneId: ${self:custom.route53HostedZoneId}
        Name: ${self:custom.route53DomainName}
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false
        Type: A
    ###############This code block enables logging on waf and sends all logs to s3.##################################
    Firehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: !Join
          - ""
          - - aws-waf-logs-
            - !Ref AWS::StackName
        ExtendedS3DestinationConfiguration:
          RoleARN: !GetAtt DeliveryRole.Arn
          BucketARN: !Join
            - ""
            - - "${self:custom.wafLoggingBucket}"
          Prefix: AWSLogs/WAF/${self:custom.stage}/
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: UNCOMPRESSED
    DeliveryRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
                - ""
                - - "arn:aws:iam::"
                  - Ref: AWS::AccountId
                  - ":policy"
                  - '${self:custom.iamPermissionsBoundaryPolicy, ""}'
            - Ref: AWS::NoValue
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: "sts:AssumeRole"
              Condition:
                StringEquals:
                  "sts:ExternalId": !Ref "AWS::AccountId"
    DeliveryPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: "firehose_delivery_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:AbortMultipartUpload"
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:ListBucket"
                - "s3:ListBucketMultipartUploads"
                - "s3:PutObject"
              Resource:
                - !Join
                  - ""
                  - - "${self:custom.wafLoggingBucket}"
                    - /*
                - !Join
                  - ""
                  - - "${self:custom.wafLoggingBucket}"
                    - /*
        Roles:
          - !Ref DeliveryRole
    ApplicationEndpointUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:custom.stage}/ui/application_endpoint
        Type: String
        Value:
          Fn::If:
            - CreateCustomCloudFrontDomain
            - https://${env:CLOUDFRONT_DOMAIN_NAME, ""}/
            - Fn::Join:
                - ""
                - - https://
                  - Fn::GetAtt:
                      - CloudFrontDistribution
                      - DomainName
                  - "/"
  Outputs:
    S3BucketName:
      Value: !Ref S3Bucket
    CloudFrontDistributionId:
      Value: !Ref CloudFrontDistribution
    CloudFrontEndpointUrl:
      Value: !Sub https://${CloudFrontDistribution.DomainName}
    FirehoseArn:
      Value: !GetAtt Firehose.Arn
    CloudFrontWebAclArn:
      Value: !GetAtt CloudFrontWebAcl.Arn
    ApplicationEndpointUrl:
      Value: !GetAtt ApplicationEndpointUrl.Value
