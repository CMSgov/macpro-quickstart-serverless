name: Deploy

on:
  push:
    branches:
      - gha*

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: set branch_name
        run: echo "::set-env name=branch_name::${GITHUB_REF#refs/heads/}"
      - name: Check branch name is a legal serverless stage name
        run: |
          if [[ ! $branch_name =~ ^[a-zA-Z][a-zA-Z0-9-]*$ ]] || [[ $branch_name -gt 128 ]]; then
            echo """
              ------------------------------------------------------------------------------------------------------------------------------
              ERROR:  Please read below
              ------------------------------------------------------------------------------------------------------------------------------
              Bad branch name detected; cannot continue.

              The Serverless Application Framework has a concept of stages that facilitate multiple deployments of the same service.
              In this setup, the git branch name gets passed to Serverless to serve as the stage name.
              The stage name (branch name in this case) is tacked onto the end of the service name by Serverless.
              Therefore, the branch name must be a valid service name.

              From Serverless:
                A service name should only contain alphanumeric (case sensitive) and hyphens. It should start with an alphabetic character and shouldnt exceed 128 characters.

              For Github Actions support, please push your code to a new branch with a name that meets Serverless' service name requirements.
              So, make a new branch with a name that begins with a letter and is made up of only letters, numbers, and hyphens... then delete this branch.
              ------------------------------------------------------------------------------------------------------------------------------
            """
            exit 1
          fi
      - uses: actions/checkout@v1
      - name: set variable names
        run: |
          echo "::set-env name=BRANCH_SPECIFIC_INFRASTRUCTURE_TYPE_NAME::${branch_name//-/_}_INFRASTRUCTURE_TYPE"
          echo "::set-env name=BRANCH_SPECIFIC_ROUTE_53_HOSTED_ZONE_ID_NAME::${branch_name//-/_}_ROUTE_53_HOSTED_ZONE_ID"
          echo "::set-env name=BRANCH_SPECIFIC_ROUTE_53_DOMAIN_NAME_NAME::${branch_name//-/_}_ROUTE_53_DOMAIN_NAME"
          echo "::set-env name=BRANCH_SPECIFIC_CLOUDFRONT_CERTIFICATE_ARN_NAME::${branch_name//-/_}_CLOUDFRONT_CERTIFICATE_ARN"
          echo "::set-env name=BRANCH_SPECIFIC_CLOUDFRONT_DOMAIN_NAME_NAME::${branch_name//-/_}_CLOUDFRONT_DOMAIN_NAME"
          echo "::set-env name=BRANCH_SPECIFIC_SES_SOURCE_EMAIL_ADDRESS_NAME::${branch_name//-/_}_SES_SOURCE_EMAIL_ADDRESS"
          echo "::set-env name=BRANCH_SPECIFIC_SES_REVIEW_TEAM_EMAIL_ADDRESS_NAME::${branch_name//-/_}_SES_REVIEW_TEAM_EMAIL_ADDRESS"
          echo "::set-env name=BRANCH_SPECIFIC_CTKEY_URL_NAME::${branch_name//-/_}_CTKEY_URL"
          echo "::set-env name=BRANCH_SPECIFIC_CTKEY_USERNAME_NAME::${branch_name//-/_}_CTKEY_USERNAME"
          echo "::set-env name=BRANCH_SPECIFIC_CTKEY_PASSWORD_NAME::${branch_name//-/_}_CTKEY_PASSWORD"
          echo "::set-env name=BRANCH_SPECIFIC_CTKEY_ACCOUNT_ID_NAME::${branch_name//-/_}_CTKEY_ACCOUNT_ID"
          echo "::set-env name=BRANCH_SPECIFIC_AWS_SECRET_ACCESS_KEY_NAME::${branch_name//-/_}_AWS_SECRET_ACCESS_KEY"
          echo "::set-env name=BRANCH_SPECIFIC_AWS_ACCESS_KEY_ID_NAME_NAME::${branch_name//-/_}_AWS_ACCESS_KEY_ID"
          echo "::set-env name=BRANCH_SPECIFIC_AWS_SECRET_ACCESS_KEY_NAME::${branch_name//-/_}_AWS_SECRET_ACCESS_KEY"
          echo "::set-env name=BRANCH_SPECIFIC_AWS_DEFAULT_REGION_NAME::${branch_name//-/_}_AWS_DEFAULT_REGION"
      - name: set variables for build
        run: ./.github/set_vars.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_AWS_ACCESS_KEY_ID_NAME] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_AWS_SECRET_ACCESS_KEY_NAME] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_AWS_DEFAULT_REGION_NAME] || secrets.AWS_DEFAULT_REGION }}
          CTKEY_URL: ${{ secrets[env.BRANCH_SPECIFIC_CTKEY_URL_NAME] || secrets.CTKEY_URL }}
          CTKEY_USERNAME: ${{ secrets[env.BRANCH_SPECIFIC_CTKEY_USERNAME_NAME] || secrets.CTKEY_USERNAME }}
          CTKEY_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_CTKEY_PASSWORD_NAME] || secrets.CTKEY_PASSWORD }}
          CTKEY_ACCOUNT_ID: ${{ secrets[env.BRANCH_SPECIFIC_CTKEY_ACCOUNT_ID_NAME] || secrets.CTKEY_ACCOUNT_ID }}
          CTKEY_IAM_ROLE: ${{ secrets[env.BRANCH_SPECIFIC_CTKEY_IAM_ROLE_NAME] || secrets.CTKEY_IAM_ROLE }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_INFRASTRUCTURE_TYPE_NAME] || 'development' }}
          SES_SOURCE_EMAIL_ADDRESS: ${{ secrets[env.BRANCH_SPECIFIC_SES_SOURCE_EMAIL_ADDRESS_NAME] || secrets.SES_SOURCE_EMAIL_ADDRESS }}
          SES_REVIEW_TEAM_EMAIL_ADDRESS: ${{ secrets[env.BRANCH_SPECIFIC_SES_REVIEW_TEAM_EMAIL_ADDRESS_NAME] || secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
          ROUTE_53_HOSTED_ZONE_ID: ${{ secrets[env.BRANCH_SPECIFIC_ROUTE_53_HOSTED_ZONE_ID_NAME] }}
          ROUTE_53_DOMAIN_NAME: ${{ secrets[env.BRANCH_SPECIFIC_ROUTE_53_DOMAIN_NAME_NAME] }}
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets[env.BRANCH_SPECIFIC_CLOUDFRONT_CERTIFICATE_ARN_NAME] }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets[env.BRANCH_SPECIFIC_CLOUDFRONT_DOMAIN_NAME_NAME] }}
      - run: ./.github/ctkey.sh
      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: cache tools
        uses: actions/cache@v2
        with:
          path: |
            .github/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./.github/package-lock.json') }}
      - name: install tools
        run: |
          pushd .github
            if [ ! -d node_modules ]; then
              npm ci
            fi
          popd
          echo "PATH=$(pwd)/.github/node_modules/.bin:\$PATH" >> set.env.sh
      - name: Combine package-lock.json files to single file
        run: find . -not -path ./.github/package-lock.json -name package-lock.json | xargs cat > combined-package-lock.txt
      - name: cache service dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/database/node_modules
            services/uploads/node_modules
            services/app-api/node_modules
            services/elasticsearch-auth/node_modules
            services/elasticsearch/node_modules
            services/elasticsearch-config/node_modules
            services/stream-functions/node_modules
            services/ui-auth/node_modules
            services/ui/node_modules
            services/ui-src/node_modules
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-package-lock.txt') }}
      - name: deploy
        run: |
          # When deploying multiple copies of this quickstart to the same AWS Account (not ideal), a prefix helps prevent stepping on each other.
          # This can optionally be set as an environment variable in the CircleCI Project Settings
          source set.env.sh
          ./deploy.sh $STAGE_PREFIX$branch_name
      - name: Print the application endpoint
        run: |
          source set.env.sh
          cd services
          ./output.sh ui CloudFrontEndpointUrl $STAGE_PREFIX$branch_name
      - name: Run TestCafe suite
        run: |
          source set.env.sh
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui CloudFrontEndpointUrl $STAGE_PREFIX$branch_name`
          popd
          ./test.sh
      - name: Store test reults
        uses: actions/upload-artifact@v2
        with:
          name: test_results
          path: tests/testcafe/testcafe_results
